import numpy as p

web = [[7, 71], [72, 74], [52, 18], [6, 26], [58, 0], [19, 53], [49, 15], [16, 42], [61, 40], [55, 31], [36, 55], \
       [30, 55], [60, 21], [24, 50], [13, 3], [11, 21], [67, 35], [6, 28], [30, 13], [63, 29], [54, 35], [66, 71], \
       [70, 32], [59, 56], [48, 22], [52, 58], [44, 49], [52, 43], [56, 8], [27, 2], [5, 53], [62, 46], [2, 51], \
       [22, 41], [61, 16], [72, 32], [41, 57], [58, 69], [3, 17], [16, 1], [5, 23], [47, 45], [66, 47], [6, 38], \
       [38, 25], [74, 67], [70, 34], [27, 32], [10, 29], [15, 38], [47, 52], [33, 9], [68, 14], [59, 37], [63, 20], \
       [12, 23], [19, 51], [43, 42], [54, 20], [68, 62], [56, 11], [28, 41], [32, 65], [73, 74], [9, 23], [4, 6], \
       [39, 35], [24, 38], [17, 4], [56, 53], [68, 64], [62, 4], [2, 18], [39, 50], [51, 58], [47, 64], [40, 19], \
       [51, 4], [67, 28], [66, 29], [69, 73], [10, 64], [74, 30], [12, 73], [36, 9], [62, 13], [20, 45], [35, 38], \
       [51, 47], [34, 36], [5, 62], [3, 59], [53, 37], [14, 74], [71, 39], [5, 46], [21, 45], [49, 26], [26, 58], \
       [69, 27], [19, 23], [67, 53], [74, 61], [29, 3], [14, 0], [59, 35], [37, 26], [60, 46], [46, 61], [72, 13], \
       [42, 12], [53, 26], [4, 69], [69, 59], [42, 43], [52, 46], [45, 37], [15, 14], [10, 65], [67, 69], [13, 35], \
       [2, 36], [0, 5], [59, 26], [60, 18], [28, 44], [9, 40], [13, 71], [3, 4], [11, 2], [24, 7], [48, 67], [61, 34], \
       [61, 6], [63, 74], [64, 30], [24, 44], [58, 4], [70, 64], [0, 63], [26, 22], [41, 36], [50, 61], [28, 69], \
       [12, 49], [3, 74], [62, 23], [35, 52], [55, 53], [36, 58], [71, 0], [21, 26], [1, 28], [25, 53], [26, 40], \
       [62, 52], [51, 33], [71, 62], [49, 4], [7, 44], [56, 69], [23, 43], [42, 69], [12, 63], [51, 52], [61, 2], \
       [52, 57], [44, 66], [37, 13], [13, 25], [9, 50], [73, 8], [33, 63], [27, 47], [64, 35], [7, 64], [50, 63], \
       [48, 16], [56, 22], [52, 58], [2, 45], [37, 38], [21, 38], [40, 27], [59, 31], [39, 46], [25, 11], [33, 64], \
       [67, 4], [28, 3], [65, 5], [50, 47], [6, 24], [36, 21], [47, 23], [14, 45], [10, 34], [45, 29], [33, 21], \
       [15, 4], [68, 38], [46, 43], [6, 25], [39, 62], [66, 37], [60, 71], [70, 14], [58, 47], [73, 23], [6, 53], \
       [31, 23], [25, 2], [11, 63], [54, 16], [25, 17], [32, 20], [20, 48], [36, 29], [65, 3], [67, 13], [53, 32], [47, 29], [43, 51], [46, 16]]
A = p.full((75, 75), 10000)
for i in range(len(web)):
    A[web[i][0]][web[i][1]] = 1
    A[web[i][1]][web[i][0]] = 1
for i in range(0, 75):
    A[i][i] = 0
B = A.copy()
for i in range(0, 75):
   for j in range(0, 75):
      for k in range(j, 75):
         if B[j][k] > B[j][i] + B[i][k]:
            B[j][k] = B[j][i] + B[i][k]
            B[k][j] = B[j][k]
_max = B[0][0]
for i in range(B.shape[0]):
    for j in range(B.shape[1]):
        if _max < B[i][j] and B[i][j] != 10000:
            _max = B[i][j]
print(_max)
print(B)

#при решении данной задачи был ипользован алгоритм Фройда-Уоршелла,
#имеющий сложность О(n^3)
#имеет модификацию а-ля пузырёк, тк граф является неориентированным
#и его матрица симметрична относительно главной диагонали
